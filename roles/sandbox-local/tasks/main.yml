---
- name: Remove old DB file
  file: |
    path='/tmp/as1_db_file.sql'
    state='absent'

- name: Unzip DB
  command: gunzip as1_db_file.sql.gz
  args:
    chdir: /tmp/

- name: Replace emails
  replace:
    dest:    /tmp/as1_db_file.sql
    regexp:  "({{ emails_to_replace | join( '|' ) }})"
    replace: "info@example.com"
    backup:  yes

- name: Drop old DBs
  mysql_db: |
    name={{ item.value.env.db_name }}
    state=absent
    login_host="{{ item.value.env.db_host | default('localhost') }}"
    login_user="{{ item.value.env.db_user }}"
    login_password="{{ item.value.env.db_password }}"
  with_dict: sb_wp_sites

- name: Create new DBs
  mysql_db: |
    name={{ item.value.env.db_name }}
    state=present
    login_host="{{ item.value.env.db_host | default('localhost') }}"
    login_user="{{ item.value.env.db_user }}"
    login_password="{{ item.value.env.db_password }}"
  with_dict: sb_wp_sites

- name: Import SQL to fresh DBs
  mysql_db: |
    name={{ item.value.env.db_name }}
    state=import
    target="/tmp/as1_db_file.sql"
  with_dict: sb_wp_sites

- name: Search/replace domain - table wp_blogs
  command: mysql -u {{ item.value.env.db_user }} -p{{ item.value.env.db_password }} -e "use {{ item.value.env.db_name }}; update {{ item.value.env.db_prefix }}blogs set domain='{{ item.key }}' where domain='{{ src_domain }}';"
  with_dict: sb_wp_sites

- name: Search/replace domain - table wp_site
  command: mysql -u {{ item.value.env.db_user }} -p{{ item.value.env.db_password }} -e "use {{ item.value.env.db_name }}; update {{ item.value.env.db_prefix }}site set domain='{{ item.key }}' where domain='{{ src_domain }}';"
  with_dict: sb_wp_sites

- name: Preform WP search-replace for the remaining strings
  command: wp search-replace '{{ src_url }}' 'http://{{ item.key }}' --all-tables --allow-root
  args:
    chdir: "{{ www_root }}/{{ item.key }}"
  with_dict: sb_wp_sites

- name: Deactivate WP rocket
  command: wp plugin deactivate wp-rocket --network --allow-root
  args:
    chdir: "{{ www_root }}/{{ item.key }}"
  with_dict: sb_wp_sites

- name: Get list of all user IDs
  command: wp user list --network --format=csv --fields=ID --allow-root
  args:
    chdir: "{{ www_root }}/xml-io.proteusthemes.com"
  register: wp_user_ids

- name: Change all user passwords
  command: wp user update {{ item }} --user_pass='99sandbox' --allow-root
  args:
    chdir: "{{ www_root }}/xml-io.proteusthemes.com"
  with_items: "{{ wp_user_ids.stdout_lines }}"
  when: item != 'ID'
