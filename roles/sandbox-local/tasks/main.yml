---
- name: Remove old DB file
  file:
    path: /tmp/as1_db_file.sql
    state: absent

- name: Unzip DB
  command: gunzip as1_db_file.sql.gz
  args:
    chdir: /tmp/

- name: Replace emails
  replace:
    dest: /tmp/as1_db_file.sql
    regexp: "({{ wp_emails.from | join( '|' ) }})"
    replace: "{{ wp_emails.to }}"
    backup: yes

- name: Drop old DBs
  mysql_db:
    name: "{{ item.value.env.db_name }}"
    state: absent
    login_host: "{{ item.value.env.db_host | default('localhost') }}"
    login_user: "{{ item.value.env.db_user }}"
    login_password: "{{ item.value.env.db_password }}"
  with_dict: "{{ sb_wp_sites }}"

- name: Create new DBs
  mysql_db:
    name: "{{ item.value.env.db_name }}"
    state: present
    login_host: "{{ item.value.env.db_host | default('localhost') }}"
    login_user: "{{ item.value.env.db_user }}"
    login_password: "{{ item.value.env.db_password }}"
  with_dict: "{{ sb_wp_sites }}"

- name: Import SQL to fresh DBs
  mysql_db:
    name: "{{ item.value.env.db_name }}"
    state: import
    target: /tmp/as1_db_file.sql
  with_dict: "{{ sb_wp_sites }}"

- name: Search/replace domain - table wp_blogs
  command: >
    mysql -u {{ item.value.env.db_user }} -p{{ item.value.env.db_password }} -e "use {{ item.value.env.db_name }}; update {{ item.value.env.db_prefix }}blogs set domain='{{ item.key }}' where domain='{{ src_domain }}';"
  with_dict: "{{ sb_wp_sites }}"

- name: Search/replace domain - table wp_site
  command: >
    mysql -u {{ item.value.env.db_user }} -p{{ item.value.env.db_password }} -e "use {{ item.value.env.db_name }}; update {{ item.value.env.db_prefix }}site set domain='{{ item.key }}' where domain='{{ src_domain }}';"
  with_dict: "{{ sb_wp_sites }}"

- name: WP search-replace for the URLs
  command: "wp search-replace '{{ src_url }}' 'http://{{ item.key }}' --all-tables --allow-root"
  args:
    chdir: "{{ www_root }}/{{ item.key }}"
  with_dict: "{{ sb_wp_sites }}"

- name: WP search-replace for the other strings only in xml-io
  become: yes
  become_user: "{{ web_user }}"
  command: "wp search-replace --network '{{ item.from }}' '{{ item.to }}'"
  args:
    chdir: "{{ www_root }}/xml-io.proteusthemes.com"
  with_items: "{{ strings_to_replace }}"

- name: Get list of all user IDs
  command: wp user list --network --format=csv --fields=ID --allow-root
  args:
    chdir: "{{ www_root }}/{{ export_domain }}"
  register: wp_user_ids

- name: Change all user passwords on xml-io
  command: "wp user update {{ item }} --user_pass='{{ dummy_pass }}' --allow-root"
  args:
    chdir: "{{ www_root }}/{{ export_domain }}"
  with_items: "{{ wp_user_ids.stdout_lines }}"
  when: item != 'ID'

- name: Change all user passwords on sandbox
  command: "wp user update {{ item }} --user_pass='{{ dummy_pass }}' --allow-root"
  args:
    chdir: "{{ www_root }}/sandbox.proteusthemes.com"
  with_items: "{{ wp_user_ids.stdout_lines }}"
  when: item != 'ID'

- include: clean-db.yml
  vars:
    - wp_dir: "{{ www_root }}/xml-io.proteusthemes.com"

- name: "Ensure {{ xml_paths.local }}/ is a directory"
  file:
    path: "{{ xml_paths.local }}/"
    state: directory

- name: Clean all old XML files within exports directory
  file:
    path: "{{ xml_paths.local }}/*.xml"
    state: absent

- name: Export XML files
  command: "wp export --dir={{ xml_paths.local }}/ --url='{{ export_domain }}/{{ item }}' --allow-root"
  args:
    chdir: "{{ www_root }}/{{ export_domain }}"
  with_items: "{{ sites_to_export }}"

- name: Rename XMLs that are not properly named when exported
  command: "mv {{ item.value }}.wordpress.{{ ansible_date_time.date }}.000.xml {{ item.key }}.wordpress.{{ ansible_date_time.date }}.000.xml"
  args:
    chdir: "{{ xml_paths.local }}/"
  with_dict: "{{ xmls_to_rename }}"
